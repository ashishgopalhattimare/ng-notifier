{"version":3,"file":"techpleiad-notifier.umd.js","sources":["../../../projects/notifier/src/lib/models/Notification.config.ts","../../../projects/notifier/src/lib/notifier.component.ts","../../../projects/notifier/src/lib/notifier.service.ts","../../../projects/notifier/src/lib/notifier.module.ts","../../../projects/notifier/src/public-api.ts","../../../projects/notifier/src/techpleiad-notifier.ts"],"sourcesContent":["export enum NotificationStatus {\n    SUCCESS,\n    FAILED,\n    WARNING,\n    ERROR,\n    INFO\n}\nexport interface NotificationTime {\n    SUCCESS: number;\n    FAILED: number;\n}\nexport const NOTIFICATION_TIME: NotificationTime = {\n    SUCCESS: 3000,\n    FAILED: 4000\n}","import { AfterViewInit, ChangeDetectionStrategy, Component, Inject, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\nimport { BehaviorSubject } from 'rxjs';\nimport { NotificationStatus } from './models/Notification.config';\nimport { NotificationData } from './models/NotificationData';\n\n@Component({\n  selector: 'lib-notifier',\n  templateUrl: './notifier.component.html',\n  styleUrls: ['./notifier.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotifierComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('success', { read: TemplateRef }) successInstance: TemplateRef<any> | undefined;\n  @ViewChild('warning', { read: TemplateRef }) warningInstance: TemplateRef<any> | undefined;\n  @ViewChild('error', { read: TemplateRef }) errorInstance: TemplateRef<any> | undefined;\n  @ViewChild('info', { read: TemplateRef }) infoInstance: TemplateRef<any> | undefined;\n\n  notifTemplate$ = new BehaviorSubject<TemplateRef<any> | undefined>(undefined);\n  HIDE_TIMEOUT = 10;\n\n  constructor(\n    private snackRef: MatSnackBarRef<NotifierComponent>,\n    @Inject(MAT_SNACK_BAR_DATA) public data: NotificationData\n  ) { }\n\n  ngOnInit(): void {}\n  ngAfterViewInit(): void {\n    this.notifTemplate$.next(this.getTemplate());\n  }\n\n  close(): void {\n    this.snackRef.dismiss();\n  }\n\n  getTemplate(): TemplateRef<any> | undefined {\n    switch (this.data.status) {\n      case NotificationStatus.SUCCESS: return this.successInstance;\n      case NotificationStatus.INFO: return this.infoInstance;\n      case NotificationStatus.FAILED:\n      case NotificationStatus.ERROR: return this.errorInstance;\n      case NotificationStatus.WARNING: return this.warningInstance;\n    }\n    return undefined;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { NotificationStatus, NotificationTime } from './models/Notification.config';\nimport { MatSnackBar, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition } from '@angular/material/snack-bar';\nimport { NotifierComponent } from './notifier.component';\n\ntype NotificationError = {\n  errorCode: string;\n  errorMessages: string;\n  timestamp: number;\n  details: ErrorDetails[];\n}\ntype ErrorDetails = {\n  field: string;\n  message: string;\n}\n\n@Injectable()\nexport class NotifierService {\n\n  private horizontalPosition: MatSnackBarHorizontalPosition = 'right';\n  private verticalPosition: MatSnackBarVerticalPosition = 'top';\n\n  constructor(\n    @Inject('NOTIFICATION_TIME') private notificationTime: NotificationTime,\n    private snackBar: MatSnackBar\n  ) {\n    console.log('notif service created');\n  }\n\n  showNotificationV1(messageList: string[], status: boolean, title?: string): void {\n    this.builder(messageList,\n      status ? NotificationStatus.SUCCESS : NotificationStatus.ERROR, \n      title\n    );\n  }\n\n  showNotificationV2(messageList: string[], status: NotificationStatus, title?: string): void {\n    this.builder(messageList, status, title);\n  }\n\n  private builder(messageList: string[], status: NotificationStatus, title?: string): void {\n    this.snackBar.openFromComponent(NotifierComponent, {\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n      duration: this.getNotifDuration(status),\n      data: {\n        message: messageList,\n        status,\n        title\n      }\n    });\n  }\n\n  getNotifDuration(status: NotificationStatus): number {\n    switch (status) {\n      case NotificationStatus.SUCCESS:\n      case NotificationStatus.INFO:\n        return this.notificationTime.SUCCESS;\n\n      case NotificationStatus.WARNING:\n      case NotificationStatus.FAILED:\n      case NotificationStatus.ERROR:\n        return this.notificationTime.FAILED;\n      default:\n        return this.notificationTime.FAILED;\n    }\n  }\n\n  getMessageListFromError(error: NotificationError): string[] {\n    return [error?.errorMessages || ''].concat(\n      error?.details?.map(x => `${x.field ? `${x.field}: ` : ''} ${x.message}`) || []\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NotifierComponent } from './notifier.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { NOTIFICATION_TIME } from './models/Notification.config';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NotifierService } from './notifier.service';\n\n@NgModule({\n  declarations: [ NotifierComponent ],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatSnackBarModule,\n    MatIconModule\n  ],\n  exports: [ ],\n  providers: [\n    NotifierService,\n    { provide: 'NOTIFICATION_TIME', useValue: NOTIFICATION_TIME }\n  ]\n})\nexport class NotifierModule { }\n","/*\n * Public API Surface of notifier\n */\n\nexport * from './lib/notifier.service';\nexport * from './lib/notifier.component';\nexport * from './lib/notifier.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {NOTIFICATION_TIME as ɵb,NotificationTime as ɵa} from './lib/models/Notification.config';\nexport {NotificationData as ɵc} from './lib/models/NotificationData';"],"names":["BehaviorSubject","Component","ChangeDetectionStrategy","MatSnackBarRef","Inject","MAT_SNACK_BAR_DATA","ViewChild","TemplateRef","Injectable","MatSnackBar","NgModule","CommonModule","FlexLayoutModule","MatSnackBarModule","MatIconModule"],"mappings":"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"}